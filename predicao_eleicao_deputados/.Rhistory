-sequencial_candidato)
test <- test %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train$id <- 1:nrow(train)
train <- train %>% SMOTE(situacao ~ .,
data = .,
perc.over = 200,
perc.under=200)
train %>%
group_by(situacao) %>%
summarise(num = n()) %>%
ungroup() %>%
mutate(total = sum(num))
View(test)
View(train)
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
test <- test %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo)
train$id <- 1:nrow(train)
train <- train %>% SMOTE(situacao ~ .,
data = .,
perc.over = 200,
perc.under=200)
train %>%
group_by(situacao) %>%
summarise(num = n()) %>%
ungroup() %>%
mutate(total = sum(num))
test %>%
predict(object=model_knn,.) %>%
F_Measure(test$situacao,.)
View(test)
View(train)
View(test)
test <- read.csv("data/test.csv")
View(test)
train_data <- read.csv("data/train.csv")
test_data <- read.csv("data/test.csv")
train_data %>% ggplot(aes(situacao)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=scales::percent) + ylab("Porcentagem relativa nos dados")
partition <- createDataPartition(y = train_data$situacao, p=0.75, list=FALSE)
set.seed(9560)
train <- data_train[partition, ]
partition <- createDataPartition(y = train_data$situacao, p=0.75, list=FALSE)
set.seed(9560)
train <- train_data[partition, ]
validacao <- train_data[-partition, ]
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
validacao <- validacao %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
test <- test %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo)
train <- train %>% SMOTE(situacao ~ .,
data = .,
perc.over = 200,
perc.under=200)
train %>%
group_by(situacao) %>%
summarise(num = n()) %>%
ungroup() %>%
mutate(total = sum(num))
cross_validation <- trainControl(method = "boot", classProbs = TRUE,savePredictions = "final")
k <- expand.grid(k = seq(from=1, to=50, by=1))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
cross_validation <- trainControl(method = "boot",classProbs = TRUE,savePredictions = "final")
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
metric = "F1",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_logistic)
model_logistic
cross_validation <- trainControl(method = "boot",classProbs = TRUE,savePredictions = "final")
model_tree<- train(situacao ~ .,
metric = "F1",
data = train,
method = "rpart",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_tree)
model_tree
cross_validation <- trainControl(method = "boot", verboseIter = FALSE,savePredictions = "final")
model_ada<- train(situacao ~ .,
data = train,
method = "ada",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_ada)
model_ada
View(validacao)
validacao %>%
predict(object=model_knn,.) %>%
F_Measure(test$situacao,.)
validacao %>%
predict(object=model_knn,.) %>%
F_Measure(validacao$situacao,.)
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
model_logistic %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_logistic,.) %>%
F_Measure(validacao$situacao,.)
validacao %>%
predict(object=model_logistic,.) %>%
F_Measure(validacao$situacao,.)
model_tree %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_tree,.) %>%
F_Measure(validacao$situacao,.)
model_ada %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_ada,.) %>%
F_Measure(validacao$situacao,.)
ggplot(varImp(model_knn))
ggplot(varImp(model_logistic))
ggplot(varImp(model_tree))
ggplot(varImp(model_ada))
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(TP = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
TN = ifelse(expected == "nao_eleito" &
prediction == "nao_eleito",1,0),
FN = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
FP = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(
TN = sum(TN),
FP = sum(FP),
FN = sum(FN)) %>%
mutate(recall = sum(TP) / (sum(TP) + FN),
precision = sum(TP) / (sum(TP) + FP),
accuracy = (sum(TP) + TN)/(sum(TP) + TN + FP + FN),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(TP = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
TN = ifelse(expected == "nao_eleito" &
prediction == "nao_eleito",1,0),
FN = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
FP = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(x = sum(TP),
TN = sum(TN),
FP = sum(FP),
FN = sum(FN)) %>%
mutate(recall = x / (x + FN),
precision = x/ (x + FP),
accuracy = (x + TN)/(x + TN + FP + FN),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(TP = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
TN = ifelse(expected == "nao_eleito" &
prediction == "nao_eleito",1,0),
FN = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
FP = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(x = sum(TP),
TN = sum(TN),
FP = sum(FP),
FN = sum(FN)) %>%
mutate(recall = x / (x + FN),
precision = x/ (x + FP),
accuracy = (x + TN)/(x + TN + FP + FN),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
result$x <- NULL
result$TN <- NULL
result$FP <- NULL
result$FN <- NULL
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(TP = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
FN = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
FP = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(x = sum(TP),
y = sum(FP),
z = sum(FN)) %>%
mutate(recall = x / (x + z),
precision = x/ (x + y),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
result$x <- NULL
result$TN <- NULL
result$FP <- NULL
result$FN <- NULL
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(TP = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
FN = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
FP = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(x = sum(TP),
y = sum(FP),
z = sum(FN)) %>%
mutate(recall = x / (x + z),
precision = x/ (x + y),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
result$x <- NULL
result$y <- NULL
result$z <- NULL
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_knn,.) %>%
F_Measure(validacao$situacao,.)
model_logistic %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_logistic,.) %>%
F_Measure(validacao$situacao,.)
model_tree %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_tree,.) %>%
F_Measure(validacao$situacao,.)
model_ada %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
validacao %>%
predict(object=model_ada,.) %>%
F_Measure(validacao$situacao,.)
F_Measure <- function(expected, predicted, ...) {
data.frame(expected=expected,
prediction=predicted) %>%
mutate(tp = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
fn = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
fp = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0)) -> result
result  %>%
summarize(x = sum(tp),
y = sum(fp),
z = sum(fn)) %>%
mutate(recall = x / (x + z),
precision = x/ (x + y),
f_measure = 2 * (precision * recall) / (precision + recall)) -> result
result$x <- NULL
result$y <- NULL
result$z <- NULL
return(result)
}
f1 <- function(data, lev = NULL, model = NULL) {
f1_val <- F1_Score(y_pred = data$pred,
y_true = data$obs,
positive = lev[1])
c(F1 = f1_val)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
F_Measure <- function(expected, predicted, ...) {
resultado<-  data.frame(expected=expected,
prediction=predicted) %>%
mutate(tp = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
fn = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
fp = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0))
resultado <-  resultado  %>%
summarize(x = sum(tp),
y = sum(fp),
z = sum(fn)) %>%
mutate(recall = x / (x + z),
precision = x/ (x + y),
f_measure = 2 * (precision * recall) / (precision + recall))
result$x <- NULL
result$y <- NULL
result$z <- NULL
return(resultado)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
F_Measure <- function(expected, predicted, ...) {
resultado<-  data.frame(expected=expected,
prediction=predicted) %>%
mutate(tp = ifelse(expected == "eleito" &
prediction == "eleito",1,0),
fn = ifelse(expected == "eleito" &
prediction == "nao_eleito",1,0),
fp = ifelse(expected == "nao_eleito" &
prediction == "eleito",1,0))
resultado <-  resultado  %>%
summarize(x = sum(tp),
y = sum(fp),
z = sum(fn)) %>%
mutate(recall = x / (x + z),
precision = x/ (x + y),
f_measure = 2 * (precision * recall) / (precision + recall))
resultado$x <- NULL
resultado$y <- NULL
resultado$z <- NULL
return(resultado)
}
model_knn %$%
pred %>%
F_Measure(expected = .$obs,
predicted = .$pred)
devtools::install_github("rstudio/keras")
library(keras)
devtools::install_github("rstudio/keras")
library(keras)
library("keras")
install.packages("keras")
library(keras)
install_keras()
library(caret)
library(tidyverse)
library(gridExtra)
library(grid)
library(keras)
train <- read.csv("../data/train.csv")
test <- read.csv("../data/test.csv")
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- read.csv("../data/train.csv")
test <- read.csv("../data/test.csv")
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
dim(train)
str(train)
names(train)
summary(train)
train <- train %>% mutate(situacaobin = unclass(situacao))
train <- train %>% select(-situacao)
as.matrix(train)
treino <- as.matrix(train)
dimnames(treino)
dimnames(treino) <- NULL
dimnames(treino)
treino <- normalize(treino[,1:14])
treino <- normalize(treino[,2:14])
treino <- normalize(treino[,1:13])
treino <- normalize(treino[,1])
treino <- normalize(treino[,1:2])
treino <- normalize(treino[,1:3])
str(treino)
treino <- normalize(treino)
train <- read.csv("../data/train.csv")
test <- read.csv("../data/test.csv")
set.seed(107)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- train %>% mutate(situacaobin = unclass(situacao))
train <- train %>% select(-situacao)
treino <- as.matrix(train)
treino <- normalize(treino[.,1:14])
treino <- normalize(treino[,1:14])
dim(treino)
dimnames(treino) <- NULL
dim(treino)
