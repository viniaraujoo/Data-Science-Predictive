library(caret)
library(tidyverse)
library(gridExtra)
train <- read.csv("data/train.csv")
View(train)
train %>% ggplot(aes(situacao)) + geom_histogram()
train %>% group_by(situacao) %>% summarise(count = n()) %>% ggplot(aes(x = situacao , y = count)) + geom_bar()
train %>% group_by(situacao) %>% summarise(count = n())
train %>% ggplot(aes(situacao)) + geom_histogram()
train %>% ggplot(aes(situacao)) + geom_histogram(binwidth=0.5)
train %>% ggplot(aes(situacao)) + geom_bar()
train %>% group_by(situacao) %>% summarise(count = n())
train %>% ggplot(aes(situacao)) + geom_bar(aes(y = (..count..)/sum(..count..)))
train %>% ggplot(aes(situacao)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=scales::percent)
train %>% ggplot(aes(situacao)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=scales::percent) + ylab("Porcentagem relativa nos dados")
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
balanceado <- SMOTE(situacao ~ ., train, perc.over = 600,perc.under=100)
remove.na(train)
na.omit(train)
train <- na.omit(train)
install.packages("smotefamily")
library(smotefamily)
balanceado <- SMOTE(situacao ~ ., train, perc.over = 600,perc.under=100)
balanceado <- SMOTE(situacao ~ ., train)
train <- train[!is.na(train)]
balanceado <- SMOTE(situacao ~ ., train)
train <- read.csv("data/train.csv")
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
balanceado <- SMOTE(situacao ~ ., train,perc.over = 200, k = 5, perc.under = 200)
train <- train[complete.cases(train),]
balanceado <- SMOTE(situacao ~ ., train)
teste<-as.data.frame(table(unlist(train)))
View(teste)
final <- x[!(is.na(teste$Class)),]
final <- teste[!(is.na(teste$Class)),]
View(final)
train$Class <- factor(train$Class)
balanceado <- SMOTE(Class ~ ., train)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
model_logistic<- train(situacao ~ .,
data = train,
method = "logicBag",
preProc = c("center", "scale"),
trControl = cross_validation)
library(caret)
library(tidyverse)
library(gridExtra)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
grid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
trControl = cross_validation,
preProc = c("center", "scale")
)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~.,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
