remove.na(train)
na.omit(train)
train <- na.omit(train)
install.packages("smotefamily")
library(smotefamily)
balanceado <- SMOTE(situacao ~ ., train, perc.over = 600,perc.under=100)
balanceado <- SMOTE(situacao ~ ., train)
train <- train[!is.na(train)]
balanceado <- SMOTE(situacao ~ ., train)
train <- read.csv("data/train.csv")
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
balanceado <- SMOTE(situacao ~ ., train,perc.over = 200, k = 5, perc.under = 200)
train <- train[complete.cases(train),]
balanceado <- SMOTE(situacao ~ ., train)
teste<-as.data.frame(table(unlist(train)))
View(teste)
final <- x[!(is.na(teste$Class)),]
final <- teste[!(is.na(teste$Class)),]
View(final)
train$Class <- factor(train$Class)
balanceado <- SMOTE(Class ~ ., train)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
model_logistic<- train(situacao ~ .,
data = train,
method = "logicBag",
preProc = c("center", "scale"),
trControl = cross_validation)
library(caret)
library(tidyverse)
library(gridExtra)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
grid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
trControl = cross_validation,
preProc = c("center", "scale")
)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~.,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
library(caret)
library(tidyverse)
library(gridExtra)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
grid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
tuneGrid= grid,
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
grid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
grid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
View(rlGrid)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlgrid <- expand.grid( cost = c(200,2,0.02),epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
train <- train %>%
select(-cargo)
train <- read.csv("data/train.csv")
train <- train %>%
select(-cargo)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- read.csv("data/train.csv")
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
library(gridExtra)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlgrid <- expand.grid( cost = c(200,2,0.02), epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlgrid)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid( cost = c(200,2,0.02), epsilon = c(0.001,0.01) )
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
plot(model_logistic)
model_logistic
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_tree<- train(situacao ~ .,
data = train,
method = "randomForest",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
library(randomForest)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_tree<- train(situacao ~ .,
data = train,
method = "randomForest",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
library(caret)
library(tidyverse)
library(gridExtra)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_tree<- train(situacao ~ .,
data = train,
method = "rf",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 5,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_tree<- train(situacao ~ .,
data = train,
method = "rf",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE))
plot(model_tree)
model_tree
install.packages("xgboost")
library(xgboost)
dim(train$data)
dtrain <- xgb.DMatrix(data = train, label = train$situacaso)
dtrain <- xgb.DMatrix(as.matrix(data = train, label = train$situacaso))
train$row.names
$row.names(train)
row.names(train)
dtrain <- xgb.DMatrix(data = train, label = row.names(train))
xgboost_model <- xgboost(data = train, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 0)
dtrain <- xgb.DMatrix(data = as.matrix(train), label = train$situacao)
View(train)
train$situacao %>%
train$situacao
library(tidyverse)
train <- read.csv('../data/train.csv')
novo <- train %>% filter(situacao == "nao_eleito") %>% mutate(bin = 0)
View(novo)
novo1 <- train %>% filter(situacao == "eleito") %>% mutate(bin = 1)
View(novo1)
full_join(novo,novo1)
final <- full_join(novo,novo1)
View(final)
final$bin %>% unique()
dtrain <- xgb.DMatrix(data = as.matrix(final %>% select(-situacao)), label = train$bin)
class(train)
class(final$bin)
class(final %>% select(-situacao))
dtrain <- xgb.DMatrix(label = train$bin,data = as.matrix(final %>% select(-situacao)))
dtrain <- xgb.DMatrix(label = train$bin,data = as.matrix(final %>% select(-situacao,-bin)))
final <- final %>% select(-situacao)
dtrain <- xgb.DMatrix(label = train$bin,data = as.matrix(final))
dim(final)
dim(train$bin)
dtrain <- xgb.DMatrix(label = final$bin,data = as.matrix(final))
xgboost_model <- xgboost(data = dtrain, max.depth = 2, eta = 1, nthread = 2, nrounds = 2, objective = "binary:logistic", verbose = 0)
View(xgboost_model)
View(teste)
pred <- predict(xgboost_model, train)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
model_ada<- train(situacao ~ .,
data = train,
method = "ada",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE))
plot(model_ada)
model_ada
test <- read.csv("data/test.csv")
pred <- predict(xgboost_model, test)
View(test)
pred <- predict(model_ada, test)
pred <- predict(model_ada, test)
data <- data.frame(ID = test$sequencial_candidato, Predicted = pred)
data$ID <- as.character(data$ID)
data %>% write_csv(path = "result.csv")
data %>% write_csv(path = "data/result.csv")
pred <- predict(model_tree, test)
data <- data.frame(ID = test$sequencial_candidato, Predicted = pred)
data$ID <- as.character(data$ID)
data %>% write_csv(path = "data/result.csv")
pred <- predict(model_logistic, test)
data <- data.frame(ID = test$sequencial_candidato, Predicted = pred)
data$ID <- as.character(data$ID)
data %>% write_csv(path = "data/result.csv")
pred <- predict(model_knn, test)
data <- data.frame(ID = test$sequencial_candidato, Predicted = pred)
data$ID <- as.character(data$ID)
data %>% write_csv(path = "data/result.csv")
install.packages(‘unbalanced’)
install.packages("unbalanced")
train$situacao
library(caret)
library(tidyverse)
library(gridExtra)
library(xgboost)
library(unbalanced)
teste <- train %>% ubBalance(situacao,"eleito",type="ubSMOTE")
View(train)
library(unbalanced)
teste <- train %>% ubBalance(train,train$situacao,"eleito",type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(train,train$situacao,train$situacao="eleito",type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(train,train$situacao,train$situacao=="eleito",type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final$bin,1,type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(X = final$bin,Y = 1,type="ubSMOTE")
View(final)
library(unbalanced)
teste <- train %>% ubBalance(Y = final$bin,type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(Y = final$bin == 1,type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final$bin,type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(final,as.factor(final$bin),type="ubSMOTE")
library(unbalanced)
teste <- train %>% ubBalance(Y=as.factor(final$bin),type="ubSMOTE")
View(teste)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
sampling = "smote",
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE)
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
sampling = "smote",
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 3,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "boot", number = 3,classProbs = TRUE,summaryFunction = twoClassSummary, search = "random", verboseIter = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation,
tuneGrid = rlGrid)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
trControl = cross_validation,
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "boot",classProbs = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation,
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "boot",classProbs = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation,
tuneGrid = rlGrid)
library(caret)
library(tidyverse)
library(gridExtra)
library(xgboost)
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
cross_validation <- trainControl(method = "boot",classProbs = TRUE,sampling = "smote")
rlGrid <- expand.grid(cost = c(200,2,0.02),loss = c("L2","L2_dual","L2_primal"), epsilon = c(0.001,0.01))
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = cross_validation,
tuneGrid = rlGrid)
model_logistic<- train(situacao ~ .,
data = train,
method = "regLogistic",
preProc = c("center", "scale"),
trControl = trainControl(method = "boot", classProbs = TRUE),
tuneGrid = rlGrid)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(situacao ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
