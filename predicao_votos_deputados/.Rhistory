knitr::opts_chunk$set(echo = TRUE)
install.packages("caret")
data(mtcars)
View(mtcars)
?mtcars
library(caret)
# modelo de regressão linear simples
model <- train(mpg ~ wt,
data = mtcars,
method = "lm")
# modelo de regressão linear múltipla
model <- train(mpg ~ .,
data = mtcars,
method = "lm")
# modelo utilizando regressão ridge
model <- train(mpg ~ .,
data = mtcars,
method = "ridge") # pode ser 'lasso'
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
View(mtcars)
?mtcars
library(caret)
# modelo de regressão linear simples
model <- train(mpg ~ wt,
data = mtcars,
method = "lm")
# modelo de regressão linear múltipla
model <- train(mpg ~ .,
data = mtcars,
method = "lm")
# modelo utilizando regressão ridge
model <- train(mpg ~ .,
data = mtcars,
method = "ridge") # pode ser 'lasso'
knitr::opts_chunk$set(echo = TRUE)
fitControl <- trainControl(## 10-fold CV
method = "cv", # boot", "boot632", "cv", "repeatedcv", "LOOCV", "LGOCV"
number = 10,
## repeated ten times
repeats = 10)
library(caret)
fitControl <- trainControl(## 10-fold CV
method = "cv", # boot", "boot632", "cv", "repeatedcv", "LOOCV", "LGOCV"
number = 10,
## repeated ten times
repeats = 10)
model.cv <- train(mpg ~ .,
data = mtcars,
method = "lasso",
trControl = fitControl)
model.cv
library(caret)
library(tidyverse)
library(gridExtra)
library(caret)
library(tidyverse)
library(gridExtra)
train <- read_csv('../data/train.csv')
train <- read.csv('../data/train.csv')
train <- read.csv('../data/train.csv')
View(train)
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_ridge <- train(votos ~ .,
method = "ridge",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_ridge <- train(votos ~ .,
data = train,
method = "ridge",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_ridge)
model_ridge
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(lambda = seq(0.01, 10^-8, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(lambda = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
cross_validation <- trainControl(method = "cv", number = 10,repeats = 10)
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunergrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_ridge <- train(votos ~ .,
data = train,
method = "ridge",
tunerGrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_ridge)
model_ridge
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tunerGrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
row(train)
row.names(train)
View(train)
lambdas <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
lassoModel <- train(votos ~ media_despesa + total_despesa + quantidade_fornecedores + quantidade_despesas + recursos_de_partido_politico + recursos_proprios + recursos_de_pessoas_juridicas + recursos_de_pessoas_fisicas + recursos_de_outros_candidatos.comites + media_receita + total_receita + quantidade_doadores + quantidade_doacoes, data = dadosLimpos,
method = "lasso",
tuneGrid = lambdas,
preProc = c("center", "scale"),
trControl = cross_validation)
lambdas <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
lassoModel <- train(votos ~ media_despesa + total_despesa + quantidade_fornecedores + quantidade_despesas + recursos_de_partido_politico + recursos_proprios + recursos_de_pessoas_juridicas + recursos_de_pessoas_fisicas + recursos_de_outros_candidatos.comites + media_receita + total_receita + quantidade_doadores + quantidade_doacoes, data = train,
method = "lasso",
tuneGrid = lambdas,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(lassoModel)
lassoModel
lambdas <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
lassoModel <- train(votos ~ ., data = train,
method = "lasso",
tuneGrid = lambdas,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(lassoModel)
lassoModel
lambdas <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ ., data = train,
method = "lasso",
tuneGrid = lambdas,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_lasso)
model_lasso
lambdas <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tuneGrid = lambdas,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_lasso)
model_lasso
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tuneGrid = lambda,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_lasso)
model_lasso
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
summary(resamples(list(RIDGE = model_ridge, LASSO = model_lasso, KNN = model_knn )))
ridgeimp <- ggplot(varImp(model_ridge))
lassoimp <- ggplot(varImp(model_lasso))
grid.arrange(ridgeimp,lassoimp, nrow = 1)
predictors <- predictors(model_lasso)
predictors
train <- train %>%
select(predictors, votos)
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_improved_knn)
model_improved_knn
prediction <- predict(model_improved_knn,test)
answer <- data.frame(ID = test$sequencial_candidato, votos = prediction)
answer$ID <- as.character(answer$ID)
answer %>% write_csv(here::here("data/answer"))
answer %>% write_csv(here::here("data/answer.csv"))
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=85))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_improved_knn)
model_improved_knn
prediction <- predict(model_improved_knn,test)
answer <- data.frame(ID = test$sequencial_candidato, votos = prediction)
answer$ID <- as.character(answer$ID)
answer %>% write_csv(here::here("data/answer.csv"))
answer %>% write_csv(here::here("data/answer.csv"))
answer %>% write_csv(here::here("data/answer.csv"))
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=73))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_improved_knn)
model_improved_knn
prediction <- predict(model_improved_knn,test)
answer <- data.frame(ID = test$sequencial_candidato, votos = prediction)
answer$ID <- as.character(answer$ID)
answer %>% write_csv(here::here("data/answer.csv"))
predictors <- predictors(model_knn)
predictors
train <- train %>%
select(predictors, votos)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- train %>%
select(predictors, votos)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_improved_knn)
model_improved_knn
prediction <- predict(model_improved_knn,test)
answer <- data.frame(ID = test$sequencial_candidato, votos = prediction)
answer$ID <- as.character(answer$ID)
answer %>% write_csv(here::here("data/answer.csv"))
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
predictors <- predictors(model_ridge)
predictors
predictors <- predictors(model_lasso)
predictors
train <- train %>%
select(predictors, votos)
cross_validation <- trainControl(method = "cv", number = 10)
k <- expand.grid(k = seq(20,100, length=81))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_improved_knn)
model_improved_knn
install.packages("standardize")
library(standardize)
train <- read.csv('../data/train.csv')
teste <- scale(train)
library(tidyverse)
train <- read.csv('../data/train.csv')
train <- train %>% mutate(total = media_despesa + total_despesa + quantidade_fornecedores + quantidade_despesas + recursos_de_partido_politico + recursos_proprios + recursos_de_pessoas_juridicas + recursos_de_pessoas_fisicas + recursos_de_outros_candidatos.comites + media_receita + total_receita + quantidade_doadores + quantidade_doacoes)
train <- train %>% select(votos, total)
train %>% write_csv(here::here("data/train2.csv"))
library(tidyverse)
train <- read.csv('../data/train.csv')
train <- train %>% mutate(total = media_despesa + total_despesa + quantidade_fornecedores + quantidade_despesas + recursos_de_partido_politico + recursos_proprios + recursos_de_pessoas_juridicas + recursos_de_pessoas_fisicas + recursos_de_outros_candidatos.comites + media_receita + total_receita + quantidade_doadores + quantidade_doacoes)
library(tidyverse)
train <- read.csv('../data/train.csv')
train <- read.csv('data/train.csv')
train <- train %>% mutate(total = media_despesa + total_despesa + quantidade_fornecedores + quantidade_despesas + recursos_de_partido_politico + recursos_proprios + recursos_de_pessoas_juridicas + recursos_de_pessoas_fisicas + recursos_de_outros_candidatos.comites + media_receita + total_receita + quantidade_doadores + quantidade_doacoes)
train %>% write_csv(here::here("data/train2.csv"))
require(randomForest)
install.packages("randomForest")
require(randomForest)
library(caret)
library(tidyverse)
library(gridExtra)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- read.csv('data/train.csv')
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_ridge <- train(votos ~ .,
data = train,
method = "ridge",
tunerGrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_ridge)
model_ridge
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tuneGrid = lambda,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_lasso)
model_lasso
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
ridgeimp <- ggplot(varImp(model_ridge))
lassoimp <- ggplot(varImp(model_lasso))
grid.arrange(ridgeimp,lassoimp, nrow = 1)
predictors <- predictors(model_lasso)
predictors
train <- train %>%
select(predictors, votos)
require(randomForest)
model <- randomForest(votos ~ .,
data = train)
teste <- predict(model,test)
resposta <- data.frame(ID = test$sequencial_candidato, votos = teste)
resposta$ID <- as.character(resposta$ID)
resposta %>% write_csv(here::here("data/teste.csv"))
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
set.seed(3333)
dtree_fit <- train(votos ~., data = train,
method = "ranger",
trControl=trctrl,
tuneLength = 10,
na.action = na.omit)
