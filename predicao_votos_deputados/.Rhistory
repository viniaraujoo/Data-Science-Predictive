resposta <- data.frame(ID = test$sequencial_candidato, votos = teste)
resposta$ID <- as.character(resposta$ID)
resposta %>% write_csv(here::here("data/teste.csv"))
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
set.seed(3333)
dtree_fit <- train(votos ~., data = train,
method = "ranger",
trControl=trctrl,
tuneLength = 10,
na.action = na.omit)
data <- readr::read_csv(
here::here('data/train.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
votos = col_integer(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato),
estado_civil = as.factor(estado_civil),
ocupacao = as.factor(ocupacao),
partido = as.factor(partido),
grau = as.factor(grau),
sexo = as.factor(sexo),
uf = as.factor(uf))
data %>%
glimpse()
data %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
data <- one_hot_encoder(dataSet = data,
encoding = encoding,
drop = TRUE,
verbose = F)
set.seed(131)
data %>%
select(-one_of(near_zero_vars)) %>%
select(-ano,-nome) %>%
train(votos ~ .,
data = .,
method = "knn",
na.action = na.omit,
tuneGrid = data.frame(k = 16),
trControl = trainControl(method="none"),
preProcess = c('scale', 'center')) -> model.knn.best
model.knn.best %>%
varImp() %$%
importance %>%
as.data.frame() %>%
rownames_to_column(var="Feature") %>%
mutate(Feature = tolower(Feature)) %>%
ggplot() +
geom_col(aes(x = reorder(Feature,Overall),
y = Overall)) +
labs(x="Feature", y="Overall Importance") +
coord_flip()
data_test <- readr::read_csv(
here::here('data/test.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato))
data_test %>%
glimpse()
data_test %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
data_test <- one_hot_encoder(dataSet = data_test,
encoding = encoding,
drop = TRUE,
verbose = F)
data_test %>%
mutate(sequencial_candidato = as.character(sequencial_candidato)) %>%
pull(sequencial_candidato) -> id_column
predict(model.knn.best, data_test) -> predictions
data.frame(ID = id_column,
votos = predictions) -> submission
submission %>%
glimpse()
write_csv(submission,
here::here('data/submission.csv'))
library(caret)
library(tidyverse)
library(gridExtra)
data <- readr::read_csv(
here::here('data/train.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
votos = col_integer(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato),
estado_civil = as.factor(estado_civil),
ocupacao = as.factor(ocupacao),
partido = as.factor(partido),
grau = as.factor(grau),
sexo = as.factor(sexo),
uf = as.factor(uf))
data %>%
glimpse()
data %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
data <- one_hot_encoder(dataSet = data,
encoding = encoding,
drop = TRUE,
verbose = F)
set.seed(131)
data %>%
select(-one_of(near_zero_vars)) %>%
select(-ano,-nome) %>%
train(votos ~ .,
data = .,
method = "knn",
na.action = na.omit,
tuneGrid = data.frame(k = 16),
trControl = trainControl(method="none"),
preProcess = c('scale', 'center')) -> model.knn.best
model.knn.best %>%
varImp() %$%
importance %>%
as.data.frame() %>%
rownames_to_column(var="Feature") %>%
mutate(Feature = tolower(Feature)) %>%
ggplot() +
geom_col(aes(x = reorder(Feature,Overall),
y = Overall)) +
labs(x="Feature", y="Overall Importance") +
coord_flip()
data_test <- readr::read_csv(
here::here('data/test.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato))
data_test %>%
glimpse()
data_test %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
data_test <- one_hot_encoder(dataSet = data_test,
encoding = encoding,
drop = TRUE,
verbose = F)
data_test %>%
mutate(sequencial_candidato = as.character(sequencial_candidato)) %>%
pull(sequencial_candidato) -> id_column
predict(model.knn.best, data_test) -> predictions
data.frame(ID = id_column,
votos = predictions) -> submission
submission %>%
glimpse()
write_csv(submission,
here::here('data/submission.csv'))
data <- readr::read_csv(
here::here('data/train.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
votos = col_integer(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato),
estado_civil = as.factor(estado_civil),
ocupacao = as.factor(ocupacao),
partido = as.factor(partido),
grau = as.factor(grau),
sexo = as.factor(sexo),
uf = as.factor(uf))
data %>%
glimpse()
data %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
data <- one_hot_encoder(dataSet = data,
encoding = encoding,
drop = TRUE,
verbose = F)
set.seed(131)
data %>%
select(-one_of(near_zero_vars)) %>%
select(-ano,-nome) %>%
train(votos ~ .,
data = .,
method = "knn",
na.action = na.omit,
tuneGrid = data.frame(k = 16),
trControl = trainControl(method="none"),
preProcess = c('scale', 'center')) -> model.knn.best
model.knn.best %>%
varImp() %$%
importance %>%
as.data.frame() %>%
rownames_to_column(var="Feature") %>%
mutate(Feature = tolower(Feature)) %>%
ggplot() +
geom_col(aes(x = reorder(Feature,Overall),
y = Overall)) +
labs(x="Feature", y="Overall Importance") +
coord_flip()
data %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
?build_encoding
??build_encoding
install.packages("encode")
library(encode)
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
data <- one_hot_encoder(dataSet = data,
encoding = encoding,
drop = TRUE,
verbose = F)
install.packages("onehot")
library(onehot)
encoding <- build_encoding(dataSet = data,
cols = c("uf","sexo","grau","ocupacao",
"partido","estado_civil"),
verbose = F)
data <- one_hot_encoder(dataSet = data,
encoding = encoding,
drop = TRUE,
verbose = F)
set.seed(131)
data %>%
select(-one_of(near_zero_vars)) %>%
select(-ano,-nome) %>%
train(votos ~ .,
data = .,
method = "knn",
na.action = na.omit,
tuneGrid = data.frame(k = 16),
trControl = trainControl(method="none"),
preProcess = c('scale', 'center')) -> model.knn.best
data %>%
nearZeroVar(saveMetrics = TRUE) %>%
tibble::rownames_to_column("variable") %>%
filter(nzv == T) %>%
pull(variable) -> near_zero_vars
set.seed(131)
data %>%
select(-one_of(near_zero_vars)) %>%
select(-ano,-nome) %>%
train(votos ~ .,
data = .,
method = "knn",
na.action = na.omit,
tuneGrid = data.frame(k = 16),
trControl = trainControl(method="none"),
preProcess = c('scale', 'center')) -> model.knn.best
model.knn.best %>%
varImp() %$%
importance %>%
as.data.frame() %>%
rownames_to_column(var="Feature") %>%
mutate(Feature = tolower(Feature)) %>%
ggplot() +
geom_col(aes(x = reorder(Feature,Overall),
y = Overall)) +
labs(x="Feature", y="Overall Importance") +
coord_flip()
model.knn.best %>%
varImp() %$%
importance %>%
as.data.frame() %>%
rownames_to_column(var="Feature") %>%
mutate(Feature = tolower(Feature)) %>%
ggplot() +
geom_col(aes(x = reorder(Feature,Overall),
y = Overall)) +
labs(x="Feature", y="Overall Importance") +
coord_flip()
data_test <- readr::read_csv(
here::here('data/test.csv'),
progress = FALSE,
local=readr::locale("br"),
col_types = cols(
ano = col_integer(),
sequencial_candidato = col_character(),
quantidade_doacoes = col_integer(),
quantidade_doadores = col_integer(),
total_receita = col_double(),
media_receita = col_double(),
recursos_de_outros_candidatos.comites = col_double(),
recursos_de_pessoas_fisicas = col_double(),
recursos_de_pessoas_juridicas = col_double(),
recursos_proprios = col_double(),
`recursos_de_partido_politico` = col_double(),
quantidade_despesas = col_integer(),
quantidade_fornecedores = col_integer(),
total_despesa = col_double(),
media_despesa = col_double(),
.default = col_character())) %>%
mutate(sequencial_candidato = as.numeric(sequencial_candidato))
data_test %>%
glimpse()
data_test %>%
map_df(function(x) sum(is.na(x))) %>%
gather(feature, num_nulls) %>%
arrange(desc(num_nulls))
data_test <- one_hot_encoder(dataSet = data_test,
encoding = encoding,
drop = TRUE,
verbose = F)
data_test %>%
mutate(sequencial_candidato = as.character(sequencial_candidato)) %>%
pull(sequencial_candidato) -> id_column
predict(model.knn.best, data_test) -> predictions
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
model_improved_knn <- train(votos ~ .,
data = .,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
train <- read.csv('../data/train.csv')
test <- read.csv('../data/test.csv')
train <- train %>%
select(-partido,
-uf,-nome,
-estado_civil,
-ocupacao,-ano,
-cargo,-grau,-sexo,
-sequencial_candidato)
ridgeimp <- ggplot(varImp(model_ridge))
lambda <- expand.grid(lambda = seq(10^-2, 10^-9, length=20))
cross_validation <- trainControl(method = "cv", number = 10)
model_ridge <- train(votos ~ .,
data = train,
method = "ridge",
tunerGrid = "lambda",
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_ridge)
model_ridge
lambda <- expand.grid(fraction = seq(0.01, 10^-8, length=20))
model_lasso <- train(votos ~ .,
data = train,
method = "lasso",
tuneGrid = lambda,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_lasso)
model_lasso
k <- expand.grid(k = seq(20,100, length=81))
model_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = cross_validation)
plot(model_knn)
model_knn
ridgeimp <- ggplot(varImp(model_ridge))
lassoimp <- ggplot(varImp(model_lasso))
grid.arrange(ridgeimp,lassoimp, nrow = 1)
predictors <- predictors(model_lasso)
predictors
train <- train %>%
select(predictors, votos)
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = k,
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = train.frame(k = 16),
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = data.frame(k = 16),
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
plot(model_improved_knn)
model_improved_knn <- train(votos ~ .,
data = train,
method = "knn",
tuneGrid = data.frame(k = 16),
preProc = c("center", "scale"),
trControl = trainControl(method="none"))
model_improved_knn
prediction <- predict(model_improved_knn,test)
answer <- data.frame(ID = test$sequencial_candidato, votos = prediction)
answer$ID <- as.character(answer$ID)
answer %>%
glimpse()
answer %>% write_csv(here::here("data/answer.csv"))
predictors <- predictors(model_lasso)
predictors
ridgeimp <- ggplot(varImp(model_ridge))
lassoimp <- ggplot(varImp(model_lasso))
grid.arrange(ridgeimp,lassoimp, nrow = 1)
ridgeimp <- ggplot(varImp(model_ridge))
lassoimp <- ggplot(varImp(model_lasso))
grid.arrange(ridgeimp,lassoimp, nrow = 1)
resposta <- read.csv('data/resposta.csv')
resposta <- read.csv('data/resposta.csv')
View(resposta)
resposta <- resposta[2:3]
View(resposta)
resposta %>% write_csv(here::here("data/resposta.csv"))
resposta$ID <- as.character(resposta$ID)
resposta %>% write_csv(here::here("data/resposta.csv"))
